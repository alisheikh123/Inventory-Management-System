@model Inventory_Management_Systems.Models.tblOrder

@{
    ViewBag.Title = "Create";
}

<h4>Order</h4>

<div class="box box-primary direct-chat direct-chat-warning">
    <div class="box-header with-border">
        <div class="row">
            <div class="col-10">Add Order</div>
            <div class="col-2"><a class="fa fa-arrow-circle-left" href="@Url.Action("Index")"> Back to List</a></div>
        </div>
    </div>

    <div class="box-body">
        <div class="container">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <div class="form-group">

                        <button type="submit" class="btn btn-success btn-sm"><i class="fa fa-save" aria-hidden="true"> Save</i></button>

                    </div>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })



                    <div class="form-row">
                        <div class="form-group col-md-5">
                            Item Name

                           <div class="form-control" id="itemName"></div>
                          @* @Html.DropDownList("itemName",null, htmlAttributes: new { @class = "itemName form-control" , multiple = "multiple" })*@
                            @Html.ValidationMessageFor(model => model.itemName, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group col-md-5">
                            Item Unit
                            <section class="itemunit form-control"></section>
                           @* @Html.DropDownList("ItemUnit", null, "--Select Unit--", htmlAttributes: new { @class = "itemunit form-control" })*@
                            @Html.ValidationMessageFor(model => model.ItemUnit, "", new { @class = "text-danger" })

                        </div>

                    </div>


                    <div class="form-row">
                        <div class="form-group col-md-5">
                            Quantity

                            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "quan form-control" } })
                            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group col-md-5">
                            Price
                            <section class="prices form-control"></section>
                           @* @Html.EditorFor(model => model.price, new { htmlAttributes = new { @class = "prices form-control" } })*@
                            @Html.ValidationMessageFor(model => model.price, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-row">


                        <div class="form-group col-md-5">
                            Amount

                            @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "amount form-control" } })
                            @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-5">
                            Total Amount

                            @Html.EditorFor(model => model.totalAmount, new { htmlAttributes = new { @class = "totalamount form-control" } })
                            @Html.ValidationMessageFor(model => model.totalAmount, "", new { @class = "text-danger" })

                        </div>
                    </div>

                    <div class="form-row">


                        <div class="form-group col-md-5">
                            Amount Paid

                            @Html.EditorFor(model => model.AmountPaid, new { htmlAttributes = new { @class = "AmountPaid form-control" } })
                            @Html.ValidationMessageFor(model => model.AmountPaid, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-5">
                            Balance Due

                            @Html.EditorFor(model => model.BalanceDue, new { htmlAttributes = new { @class = "BalanceDue form-control" } })
                            @Html.ValidationMessageFor(model => model.BalanceDue, "", new { @class = "text-danger" })

                        </div>
                    </div>



                    <div class="form-row">


                        <div class="form-group col-md-5">
                            Status

                            @Html.EnumDropDownListFor(model => model.status, htmlAttributes: new { @class = "status form-control" })
                            @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-5">
                            Description

                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

                        </div>
                    </div>



                    <div class="form-row">
                       

                        <div class="form-group col-md-5">
                            Discount

                            @Html.EditorFor(model => model.discount, new { htmlAttributes = new { @class = "form-control" ,placeholder="%"} })
                            @Html.ValidationMessageFor(model => model.discount, "", new { @class = "text-danger" })

                        </div>
                        <div class="form-group col-md-5">
                            Current Date

                            @Html.EditorFor(model => model.current_Date, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.current_Date, "", new { @class = "text-danger" })
                        </div>
                    </div>


                </div>
            }
        </div>
    </div>
</div>
@section scripts {

   


    <script>
        $(function () {


           
                $('#itemName').magicSuggest({
                    
                });
          

            var totalAmount = 0;
            var Amountpaid = 0;
            var BalanceDue = 0;
            var Amount= 0;
            $('.totalamount').val(totalAmount);
            $('.AmountPaid').val(Amountpaid);
            $('.BalanceDue').val(BalanceDue);
            $(".amount").val(Amount);
        });
    </script>

    <script type="text/javascript">



        //$('.itemunit').select2();
        $('.status').select2();
        $('.itemName').magicSuggest({
            

        });
        $(".itemName").on("change", function () {
            var itemValue = $('.itemName').val()
          
           

           
           
            $.ajax({
                type: 'post',
                url: '/tblOrders/GetItem',
                data: { id: itemValue },
                datatype: "json",
                async: "false",
                success: function (data) {
                    $(data).each(function () {
                        
                        $('.prices').html(data.price);
                        $('.itemunit').html(data.unit);
                        //$('prices').val('');
                        console.log(data.price);

                    });

                    return;



                },
                error: function (err) {
                    alert("error");
                }

            });

            //    .then(function (data) {
            //    var option = new Option(data.itemValue, data.id, true, true);
            //    itemValue.append(option).trigger('change');

            //});

        });

                                                                                              
        $(".quan,.prices").keyup(function (e) {

            var q = $(".quan").val();
            var p = $(".prices").text();
            var result = "";

            //alert("Quantity" + q + "Price" + p);
            if (q !== "" && p !== "" && $.isNumeric(q) && $.isNumeric(p)) {
                result = parseFloat(q) * parseFloat(p);
            }
            $(".amount").val(result);
           var amount = $(".amount").val(result);
            var totalamount = 0;
            totalamount += amount;
            $('.totalamount').val(totalamount);
        });
                          


    </script>
    <script>
        $('.amount').on(function () {
            var totalAmount = 0;
           
            $('.amount').each(function () {
                var inputval = $(this).val();
                if ($.isNumeric(inputval)) {
                    totalAmount += parseInt(inputval);
                }

            });

            $('.totalamount').val(totalAmount);
        });  
    </script>
    

}




