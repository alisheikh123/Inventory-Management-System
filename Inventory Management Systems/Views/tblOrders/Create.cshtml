@model Inventory_Management_Systems.Models.tblOrder

@{
    ViewBag.Title = "Create";
}

<h4>Order</h4>

<div class="box box-primary direct-chat direct-chat-warning">
    <div class="box-header with-border">
        <div class="row">
            <div class="col-10">Add Order</div>
            <div class="col-2"><a class="fa fa-arrow-circle-left" href="@Url.Action("Index")"> Back to List</a></div>
        </div>
    </div>

    <div class="box-body">
        <div class="container">
            @*@using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()*@

                <div class="form-horizontal">
                    <div class="form-group">

                        <button type="submit" class="btn btn-success btn-sm" onclick="save()"><i class="fa fa-save" aria-hidden="true"> Save</i></button>

                    </div>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })



                    <div class="form-row">
                        <div class="form-group col-md-5">
                            Item Name

                           <div class="itemName form-control"></div>
                           @* @Html.DropDownList("itemName",null, htmlAttributes: new { @class = "itemName form-control" , multiple = "multiple" })*@
                            @Html.ValidationMessageFor(model => model.itemName, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group col-md-5">
                            Item Unit
                            <section class="itemunit form-control"></section>
                            @* @Html.DropDownList("ItemUnit", null, "--Select Unit--", htmlAttributes: new { @class = "itemunit form-control" })*@
                            @Html.ValidationMessageFor(model => model.ItemUnit, "", new { @class = "text-danger" })

                        </div>

                    </div>


                    <div class="form-row">
                        <div class="form-group col-md-5">
                            Quantity

                            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "quan form-control" } })
                            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group col-md-5">
                           
                            Price
                            
                     <section class="prices form-control"></section>
                           @*<input type="text" onchange="setTwoNumberDecimal" class="prices"/>*@
                       @*  @Html.EditorFor(model => model.price, new { htmlAttributes = new { @class = "form-control" } })*@
                            @Html.ValidationMessageFor(model => model.price, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-row">


                        <div class="form-group col-md-5">
                            Amount

                            @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "amount form-control" } })
                            @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-5">
                            Total Amount

                            @Html.EditorFor(model => model.totalAmount, new { htmlAttributes = new { @class = "totalamount form-control" } })
                            @Html.ValidationMessageFor(model => model.totalAmount, "", new { @class = "text-danger" })

                        </div>
                    </div>

                    <div class="form-row">


                        <div class="form-group col-md-5">
                            Amount Paid

                            @Html.EditorFor(model => model.AmountPaid, new { htmlAttributes = new { @class = "AmountPaid form-control" } })
                            @Html.ValidationMessageFor(model => model.AmountPaid, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-5">
                            Balance Due

                            @Html.EditorFor(model => model.BalanceDue, new { htmlAttributes = new { @class = "BalanceDue form-control" } })
                            @Html.ValidationMessageFor(model => model.BalanceDue, "", new { @class = "text-danger" })

                        </div>
                    </div>



                    <div class="form-row">


                        <div class="form-group col-md-5">
                            Status

                            @Html.EnumDropDownListFor(model => model.status, htmlAttributes: new { @class = "status form-control" })
                            @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-5">
                            Description

                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

                        </div>
                    </div>



                    <div class="form-row">


                        <div class="form-group col-md-5">
                            Discount

                            @Html.EditorFor(model => model.discount, new { htmlAttributes = new { @class = "discount form-control", placeholder = "%" } })
                            @Html.ValidationMessageFor(model => model.discount, "", new { @class = "text-danger" })

                        </div>
                        <div class="form-group col-md-5">
                            Current Date

                            @Html.EditorFor(model => model.current_Date, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.current_Date, "", new { @class = "text-danger" })
                        </div>
                    </div>


                </div>
            @*}*@
        </div>
    </div>
</div>
@section scripts {

    <script>
        function setTwoNumberDecimal(event) {
            this.value = parseFloat(this.value).toFixed(2);
        }
    </script>

    <script>
        function save() {
            var itemName = $('.itemName').get(0);
            var unit = $('.itemunit').val();
            var price = $('.prices').get();
            var quantity = $('.quan').val();
            var amount = $('amount').val();
            var totalamount = $('totalamount').val();
            var amountpaid = $('.AmountPaid').val();
            var balancedue = $('.BalanceDue').val();
            var status = $('.status').val();
            var descript = $('#Description').val();
            var currentdate = $('#current_Date').val();
            var discount = $('.discount').val();

            alert("ItemName:" + itemName + "<br /> unit" + unit + "<br />price" + price + "<br />quan" + quantity + "<br />amount" + amount + "<br />totalamount" + totalamount +
                "<br />mountpaid" + amountpaid + "<br />balancedue" + balancedue + "<br />status" + status + "<br />descript" + descript + "<br />currentdate" + currentdate + "<br />discount" + discount
            );

        }
    </script>



    <script>
        $(document).on("change keyup blur", ".discount", function () {
            var main = $('.AmountPaid').val();
            var disc = $('.discount').val();
            var dec = (disc / 100).toFixed(2); //its convert 10 into 0.10
            var mult = main * dec; // gives the value for subtract from main value
            var discont = main - mult;

            $('.totalamount').val(discont);
        });
    </script>

    <script>
        $(function () {






            var totalAmount = 0;
            var Amountpaid = 0;
            var BalanceDue = 0;
            var Amount = 0;
            $('.totalamount').val(totalAmount);
            $('.AmountPaid').val(Amountpaid);
            $('.BalanceDue').val(BalanceDue);
            $(".amount").val(Amount);
        });
    </script>

    <script type="text/javascript">



        $('.status').select2();


        var ms = $('.itemName').magicSuggest({

            allowFreeEntries: false,
            useZebraStyle: true,
            strictSuggest: true,
            minChars: 2,
            minCharsRenderer: function (v) {
                return 'Be more precise!!';
            },
            resultAsString: true,
            placeholder: "Search Items..",
            data: '/tblOrders/getListItem',
            valueField: 'itemid',
            displayField: 'itemNamw',
            maxSuggestions: 10,
            maxSelection: 1

        });



        $(ms).on("selectionchange", function (e, m) {


            var ItemNam = JSON.stringify(this.getValue());
            var ItemName = ItemNam.replace(/[\[\]']/g, '');



            $.ajax({
                type: 'post',
                url: '/tblOrders/GetItem',
                data: { id: ItemName },
                datatype: "json",
                traditional: true,
                async: "false",
                success: function (data) {
                    $(data).each(function () {
                        
                        $('.prices').html(data.price);
                        $('.itemunit').html(data.unit);



                    });

                    return;



                },
                error: function (err) {
                    alert("error");
                }

            });



        });


        //$(".quan,.prices").keyup(function (e) {
        $(document).on("change keyup blur", ".quan", function () {
            var q = $(".quan").val();
            var p = $(".prices").text();
            var result = "";


            if (q !== "" && p !== "" && $.isNumeric(q) && $.isNumeric(p)) {
                result = parseFloat(q) * parseFloat(p);
            }
            $(".amount").val(result);
          //  $(".totalamount").val(result);
            //var amount = $(".amount").val(result);
            //var totalamount = "";
            //totalamount += amount;
            //$('.totalamount').val(totalamount);
        });

        //$(".AmountPaid,.amount").keyup(function (e) {
        $(document).on("change keyup blur", ".AmountPaid", function () {
            var amountpaid = parseFloat($('.AmountPaid').val());
            var totalAmount = parseFloat($('.amount').val());
            $('.BalanceDue').val(totalAmount - amountpaid);


        });


    </script>
    <script>
        $('.amount').on(function () {
            var totalAmount = 0;

            $('.amount').each(function () {
                var inputval = $(this).val();
                if ($.isNumeric(inputval)) {
                    totalAmount += parseInt(inputval);
                }

            });

            $('.totalamount').val(totalAmount);
        });
    </script>


}




